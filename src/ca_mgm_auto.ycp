/**
 * File:	clients/ca-management_auto.ycp
 * Package:	Configuration of ca-management
 * Summary:	Client for autoinstallation
 * Authors:	Ryan Partridge <rpartridge@novell.com>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param function to execute
 * @param map/list of ca-management settings
 * @return map edited settings, Summary or boolean on success depending on called function
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallFunction ("ca-management_auto", [ "Summary", mm ]);
 */

{

textdomain "ca-management";

import "Progress";
import "Report";
import "Users";
import "CaMgm";
import "Summary";
import "Hostname";

include "ca-management/new_cert_read_write.ycp";
include "ca-management/util.ycp";

/**
 * Creates Country items
 * @return a list country items formated for a UI table
 */
define list<term> getAutoCountryList () ``{
    list<term> result = [];
    map<string, string> country_map = (map<string, string>)
	eval(SCR::Read(.target.yast2, "country.ycp"));

    map<string, string> country_index = mapmap (string k, string v,
						country_map, { return ($[v : k]); });

    list<string> name_list = maplist ( string k, string v,
				       country_map, { return v; });

    name_list = sort (name_list);	
	    
    foreach (string name, name_list, ``{
	result = add (result, `item (`id (country_index[name]:""), name ,
				     CaMgm::autoYaSTSettings["country"]:Timezone::GetCountryForTimezone("") == country_index[name]:"") );
    });
    return result;	
}


/**
 * Autoyast configuration of ca-management
 * For use with autoinstallation.
 * @return sequence result
 */
any caAutoSequence() {

    string caption = _("CA Configuration");
    string confirmPassword = "";
    	string help_text = _("<p>
YaST generates a default CA and certificate automatically. This CA and certificate
is used for communicating with the Apache server.
Here, change the settings of this CA and certificate or import a CA and certificate from a file.
</p>
");
	
    /* Initialization dialog contents */
    Wizard::CreateDialog();

    confirmPassword = CaMgm::autoYaSTSettings["password"]:"";

    term contents = `VBox (
			   `RadioButtonGroup(`id(`rb),
				`VBox(
				      `Left(`RadioButton(`id(`import), `opt( `notify),
							 _("Import Common CA and Certificate"),
							 CaMgm::autoYaSTSettings["importCertificate"]:true)),
				      `HBox ( `HSpacing (3),
					      `VBox(    
						    `HBox (
							   `HWeight(2, `TextEntry( `id (`pathCert), _("&Path of Certificate"),
										   CaMgm::autoYaSTSettings["pathCertificate"]:"")),
							   `HWeight(1,`VBox(
									    `Label(""),
									    `PushButton (`id(`browseCert), `opt( `notify), Label::BrowseButton())
									    )
								    )
							   ),
						    `HBox(`HWeight (1,`Password(`id(`pw3), `opt(`hstretch), _("&Password:"), CaMgm::autoYaSTSettings["password"]:"")),
							  `HSpacing(2), 
							  `HWeight (1,`Password(`id(`pw4), `opt(`hstretch), _("Co&nfirm Password"), confirmPassword))
							  )
						    )
					      ),				      
				      `Left(`RadioButton(`id(`notImport), `opt( `notify),
							 _("Generate Common CA and Certificate"),
							 !(CaMgm::autoYaSTSettings["importCertificate"]:false))),
				      `HBox(`HSpacing (3),
					    `VBox(    
						  `HBox(`HWeight (1,`TextEntry( `id (`id_CAName), _("&CA Name:"),
										CaMgm::autoYaSTSettings["CAName"]:"YaST_Default_CA")),
							`HSpacing(2), 
							`HWeight (1,`TextEntry( `id (`id_commonName), _("&Common Name:"),
										CaMgm::autoYaSTSettings["ca_commonName"]:""))
							),
						  `HBox(`HWeight (1,`TextEntry(`id(`email), _("E-Mail"),
									       CaMgm::autoYaSTSettings["server_email"]:"")),
							`HSpacing(2), 
							`HWeight (1,`ComboBox( `id (`id_country), `opt(`editable), _("C&ountry:"),
									       getAutoCountryList()))
							),				     
						  `HBox(`HWeight (1,`TextEntry( `id (`id_organisation), _("O&rganization:"),
										CaMgm::autoYaSTSettings["organisation"]:"")),
							`HSpacing(2), 
							`HWeight (1,`TextEntry( `id (`id_organisationUnit), _("Or&ganizational Unit:"),
										CaMgm::autoYaSTSettings["organisationUnit"]:""))
							),
						  `HBox(`HWeight (1,`TextEntry( `id (`id_locality), _("Loca&lity:"),
										CaMgm::autoYaSTSettings["locality"]:"")),
							`HSpacing(2), 
							`HWeight (1,`TextEntry( `id (`id_state), _("&State:"),
										CaMgm::autoYaSTSettings["state"]:""))
							),
						  `HBox(`HWeight (1,`Password(`id(`pw1), `opt(`hstretch), _("&Password:"), CaMgm::autoYaSTSettings["password"]:"")),
							`HSpacing(2), 
							`HWeight (1,`Password(`id(`pw2), `opt(`hstretch), _("Co&nfirm Password"), confirmPassword))
							),
						  `Left(`CheckBox(`id(`localServerName), `opt(`notify),
								  _("Take Local Server Name"),
								  CaMgm::autoYaSTSettings["takeLocalServerName"]:true)),
						  `HBox(`HWeight (1,`TextEntry( `id (`id_serverName), _("&Server Name:"),
										CaMgm::autoYaSTSettings["server_commonName"]:"")),
							`HSpacing(2), 
							`HWeight (1,`Empty())
							)
						  )
					    )
				      )
				)
			   );
    
    Wizard::SetContents (caption, contents, help_text, false, true);
    Wizard::SetNextButton(`next, Label::FinishButton() );
    
    // Get the user input.
    //
    any ret = nil;

    repeat 
    {
	if (UI::QueryWidget(`id(`rb), `CurrentButton) == `import)
	{
 	    UI::ChangeWidget (`id (`id_CAName), `Enabled, false);
	    UI::ChangeWidget (`id (`id_commonName), `Enabled, false);
	    UI::ChangeWidget (`id (`email), `Enabled, false);
	    UI::ChangeWidget (`id (`id_country), `Enabled, false);
	    UI::ChangeWidget (`id (`id_organisation), `Enabled, false);
	    UI::ChangeWidget (`id (`id_organisationUnit), `Enabled, false);
	    UI::ChangeWidget (`id (`id_locality), `Enabled, false);
	    UI::ChangeWidget (`id (`id_state), `Enabled, false);
	    UI::ChangeWidget (`id (`pw1), `Enabled, false);
	    UI::ChangeWidget (`id (`pw2), `Enabled, false);
	    UI::ChangeWidget (`id (`localServerName), `Enabled, false);
	    UI::ChangeWidget (`id (`id_serverName), `Enabled, false);
	    UI::ChangeWidget (`id (`pathCert), `Enabled, true); 
	    UI::ChangeWidget (`id(`browseCert), `Enabled, true);
	    UI::ChangeWidget (`id (`pw3), `Enabled, true);
	    UI::ChangeWidget (`id (`pw4), `Enabled, true);
	    
	}
	else
	{
 	    UI::ChangeWidget (`id (`id_CAName), `Enabled, true);
	    UI::ChangeWidget (`id (`id_commonName), `Enabled, true);
	    UI::ChangeWidget (`id (`email), `Enabled, true);
	    UI::ChangeWidget (`id (`id_country), `Enabled, true);
	    UI::ChangeWidget (`id (`id_organisation), `Enabled, true);
	    UI::ChangeWidget (`id (`id_organisationUnit), `Enabled, true);
	    UI::ChangeWidget (`id (`id_locality), `Enabled, true);
	    UI::ChangeWidget (`id (`id_state), `Enabled, true);
	    UI::ChangeWidget (`id (`localServerName), `Enabled, true);
	    UI::ChangeWidget (`id (`pathCert), `Enabled, false); 
	    UI::ChangeWidget (`id(`browseCert), `Enabled, false);
	    UI::ChangeWidget (`id (`pw3), `Enabled, false);
	    UI::ChangeWidget (`id (`pw4), `Enabled, false);
	    
		UI::ChangeWidget (`id (`pw1), `Enabled, true);
		UI::ChangeWidget (`id (`pw2), `Enabled, true);

	    if ((boolean) UI::QueryWidget(`id(`localServerName), `Value))
	    {
		UI::ChangeWidget (`id (`id_serverName), `Enabled, false);
	    }
	    else
	    {
		UI::ChangeWidget (`id (`id_serverName), `Enabled, true);
	    }	    
	}

	
	ret = Wizard::UserInput();

	if (ret == `browseCert)
	{
	    string name = selectFile (false, "*.p12", "Import from ..." );
	    if ( name != nil )
	    {
		UI::ChangeWidget(`id(`pathCert), `Value, name);
	    }
	    ret = `again;		
	}

	if (ret == `next
	    ||ret == `back)
	{
	    remove (CaMgm::autoYaSTSettings, "certificate");
	    
	    boolean notImport = (boolean) (UI::QueryWidget(`id(`rb), `CurrentButton) == `notImport);
	    if (notImport)
	    {
		confirmPassword = (string) UI::QueryWidget(`id(`pw2), `Value);
		if ((string) UI::QueryWidget(`id(`pw1), `Value) != confirmPassword)
		{
		    Popup::Error(_("New passwords do not match."));
		    ret = `again;
		}
		else if ( size(confirmPassword) < 4)
		{
		    Popup::Error(_("Password length should be greater than three characters."));
		    ret = `again;
		}
	    }
	    if (notImport
		&& size ((string) UI::QueryWidget(`id(`id_CAName), `Value)) <= 0
		&& ret!=`again)
	    {
		Popup::Error(_("CA name required."));
		ret = `again;
	    }	    	    
	    if (notImport
		&& size ((string) UI::QueryWidget(`id(`id_commonName), `Value)) <= 0
		&& ret!=`again)
	    {
		Popup::Error(_("Common name required."));
		ret = `again;
	    }
	    if (notImport
		&& !check_mail_address((string) UI::QueryWidget(`id(`email), `Value))
		&& ret!=`again)
	    {
		Popup::Error(_("Invalid e-mail format."));
		ret = `again;
	    }

	    if (notImport
		&& !((boolean) UI::QueryWidget(`id(`localServerName), `Value))
		&& size ((string) UI::QueryWidget(`id(`id_serverName), `Value)) <= 0
		&& ret!=`again)
	    {
		Popup::Error(_("Server name required."));
		ret = `again;		
	    }

	    if (!notImport
		&& ret!=`again)
	    {
		confirmPassword = (string) UI::QueryWidget(`id(`pw4), `Value);
		if ((string) UI::QueryWidget(`id(`pw3), `Value) != confirmPassword)
		{
		    Popup::Error(_("New passwords do not match."));
		    ret = `again;
		}
		else if ( size(confirmPassword) < 4)
		{
		    Popup::Error(_("Password length should be greater than three characters."));
		    ret = `again;
		}		
	    }	    

	    map retmap = $[];
	    
	    if (!notImport
		&& ret!=`again)
	    {
		string command = sformat("/usr/bin/openssl base64 -in %1 -e",
					 (string) UI::QueryWidget(`id (`pathCert), `Value));
		retmap = (map) SCR::Execute (.target.bash_output,
						 command,
						 $[] );
		y2milestone("%1 :%2", command, retmap);
		if (retmap["exit"]:0 != 0)
		{
		    y2error("%1 :%2", command, retmap);		    
		    Popup::Error(_("Cannot read the certificate."));
		    ret = `again;		
		}
	    }

	    if (ret!=`again)
	    {
		CaMgm::autoYaSTSettings = $[];
		
		CaMgm::autoYaSTSettings["importCertificate"] = (boolean) ((symbol)UI::QueryWidget(`id(`rb), `CurrentButton) == `import);
		if (CaMgm::autoYaSTSettings["importCertificate"]:false)
		{
		    CaMgm::autoYaSTSettings["certificate"] = strip(retmap["stdout"]:"");
		    CaMgm::autoYaSTSettings["pathCertificate"] = (string) UI::QueryWidget(`id (`pathCert), `Value);
		    CaMgm::autoYaSTSettings["password"] = (string) UI::QueryWidget(`id(`pw3), `Value);		    
		}
		else
		{
		    CaMgm::autoYaSTSettings["takeLocalServerName"] = (boolean) UI::QueryWidget(`id(`localServerName), `Value);	
		    CaMgm::autoYaSTSettings["password"] = (string) UI::QueryWidget(`id(`pw1), `Value);
		    if (!CaMgm::autoYaSTSettings["takeLocalServerName"]:true)
		    {
			CaMgm::autoYaSTSettings["server_commonName"] = (string) UI::QueryWidget(`id(`id_serverName), `Value);
		    }
		    CaMgm::autoYaSTSettings["CAName"] = (string) UI::QueryWidget(`id(`id_CAName), `Value);
		    CaMgm::autoYaSTSettings["ca_commonName"] = (string) UI::QueryWidget(`id(`id_commonName), `Value);
		    CaMgm::autoYaSTSettings["server_email"] = (string) UI::QueryWidget(`id(`email), `Value);
		    CaMgm::autoYaSTSettings["country"] = (string) UI::QueryWidget(`id(`id_country), `Value);
		    CaMgm::autoYaSTSettings["organisation"] = (string) UI::QueryWidget(`id(`id_organisation), `Value);
		    CaMgm::autoYaSTSettings["organisationUnit"] = (string) UI::QueryWidget(`id(`id_organisationUnit), `Value);
		    CaMgm::autoYaSTSettings["locality"] = (string) UI::QueryWidget(`id(`id_locality), `Value);
		    CaMgm::autoYaSTSettings["state"] = (string) UI::QueryWidget(`id(`id_state), `Value);
		}
	    }
	}
    }
    until ( ret == `next
	    || ret == `abort
	    || ret == `back);

    UI::CloseDialog();
    return ret;
}

/**
 * Get all ca-management settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
boolean Import (map settings) {
    boolean ret = true;

    CaMgm::autoYaSTSettings = $[];


    CaMgm::autoYaSTSettings["importCertificate"] = settings["importCertificate"]:false;
    if (CaMgm::autoYaSTSettings["importCertificate"]:false)
    {
	// importing CA/certificate
	CaMgm::autoYaSTSettings["certificate"] = settings["certificate"]:"";
	CaMgm::autoYaSTSettings["pathCertificate"] = settings["pathCertificate"]:"";
	CaMgm::autoYaSTSettings["password"] = settings["password"]:"";	
    }
    else
    {
	//create one
	if (haskey (settings, "password"))
	{
	    CaMgm::autoYaSTSettings["password"] = settings["password"]:"";
	}
    
	CaMgm::autoYaSTSettings["takeLocalServerName"] = settings["takeLocalServerName"]:true;
	if (settings["takeLocalServerName"]:true )
	{
		map<string,string> host_ips = getHostIPs ();
		string hostname_bak = "";
		
		foreach(string key, string value, host_ips, {
														 if(value == "DNS")
														 {
															 hostname_bak = key;
														 }
													 });
		
	    map retmap = (map) SCR::Execute (.target.bash_output,
					     "/bin/hostname --long",
					     $[] );
	    y2milestone("Hostname :%1", retmap);
	    if (retmap["exit"]:1 != 0)
	    {
			if(hostname_bak == "")
			{
				retmap["stdout"] = Hostname::CurrentFQ();
			}
			else
			{
				retmap["stdout"] = hostname_bak;
			}
	    }
            string default_fqdn = "linux." + Hostname::DEFAULT_DOMAIN;
            CaMgm::autoYaSTSettings["server_commonName"] = strip(retmap["stdout"]:default_fqdn);
	}
	else
	{
	    if (haskey (settings, "server_commonName"))
	    {	    
		CaMgm::autoYaSTSettings["server_commonName"] = settings["server_commonName"]:"";
	    }
	}
	if (haskey (settings, "CAName"))
	{	    
	    CaMgm::autoYaSTSettings["CAName"] = settings["CAName"]:"YaST_Default_CA";
	}
	if (haskey (settings, "ca_commonName"))
	{	        
	    CaMgm::autoYaSTSettings["ca_commonName"] = settings["ca_commonName"]:"";
	}
	if (haskey (settings, "server_email"))
	{	        
	    CaMgm::autoYaSTSettings["server_email"] = settings["server_email"]:"";
	}
	if (haskey (settings, "country"))
	{	        
	    CaMgm::autoYaSTSettings["country"] = settings["country"]:"";
	}
	if (haskey (settings, "organisation"))
	{	        
	    CaMgm::autoYaSTSettings["organisation"] = settings["organisation"]:"";
	}
	if (haskey (settings, "organisationUnit"))
	{	        
	    CaMgm::autoYaSTSettings["organisationUnit"] = settings["organisationUnit"]:"";
	}
	if (haskey (settings, "locality"))
	{	        
	    CaMgm::autoYaSTSettings["locality"] = settings["locality"]:"";
	}
	if (haskey (settings, "state"))
	{	        
	    CaMgm::autoYaSTSettings["state"] = settings["state"]:"";
	}
    }
    
    return ret;
}

/**
 * Dump the ca-management settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
map Export () {
    
    return CaMgm::autoYaSTSettings;
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
map AutoPackages() {
    return $[ "install":["openssl"], "remove":[] ];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
string Summary() {
    /* Configuration summary text for autoyast */
    string summary = "";

    if (CaMgm::autoYaSTSettings["importCertificate"]:false)
    {
	summary = Summary::AddHeader (summary,_("Import Certificate from File"));	
    	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["pathCertificate"]:"");
    }
    else
    {
	summary = Summary::AddHeader (summary,_("Server Name"));
	if (CaMgm::autoYaSTSettings["takeLocalServerName"]:true)
	{
	    summary = Summary::AddLine (summary, _("[local server name]"));
	}
	else
	{
	    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["server_commonName"]:"");
	}
	summary = Summary::AddHeader (summary,_("CA Name"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["CAName"]:"YaST_Default_CA");
	summary = Summary::AddHeader (summary, _("Common Name"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["ca_commonName"]:_("[not set]"));
	summary = Summary::AddHeader (summary, _("Email"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["server_email"]:_("[not set]"));
	summary = Summary::AddHeader (summary, _("Country"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["country"]:_("[not set]"));
	summary = Summary::AddHeader (summary, _("Organization"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["organisation"]:_("[not set]"));
	summary = Summary::AddHeader (summary, _("Organizational Unit"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["organisationUnit"]:_("[not set]"));
	summary = Summary::AddHeader (summary, _("Locality"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["locality"]:_("[not set]"));
	summary = Summary::AddHeader (summary, _("State"));
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["state"]:_("[not set]"));
    
	summary = Summary::AddHeader (summary, _("Password"));
	if (size (CaMgm::autoYaSTSettings["password"]:"") <= 0 )
	{
	    summary = Summary::AddLine (summary, _("[not set]"));
	}
	else
	{
	    summary = Summary::AddLine (summary, _("[set]"));
	}
    }
    
    return summary;
}


/**
 * Write all ca-management settings
 * @return true on success
 */
boolean Write() {
    boolean success = true;
    string caption = _("Generating Common Server Certificate");
    integer steps = 2;
    integer sl = 500;

    Report::DisplayErrors(true, 5);
    Report::DisplayMessages(true, 5);
    
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Read server information"),
	    /* Progress stage 2/2 */
	    _("Create the default CA and server certificate")
	], [
	    /* Progress stage 1/2 */
	    _("Read server information"),
	    /* Progress step 2/2 */
	    _("Creating the default CA and server certificate..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // Read server information

    string tmpfile = (string) SCR::Read (.target.tmpdir) + "/YaST-Servercert.p12";
    
    Progress::NextStage();
    if (CaMgm::autoYaSTSettings["importCertificate"]:false)
    {
	// importing CA/certificate
	string command = sformat("/usr/bin/openssl base64 -out %1 -d",
				 tmpfile);
	SCR::Execute (.target.bash_input,
		      command,
		      CaMgm::autoYaSTSettings["certificate"]:"");
    }
    else
    {
	// create one
	if (CaMgm::autoYaSTSettings["takeLocalServerName"]:true)
	{
		map<string,string> host_ips = getHostIPs ();
		string hostname_bak = "";
		
		foreach(string key, string value, host_ips, {
														 if(value == "DNS")
														 {
															 hostname_bak = key;
														 }
													 });
		
	    map retmap = (map) SCR::Execute (.target.bash_output,
										 "/bin/hostname --long",
										 $[] );

	    y2milestone("Hostname :%1", retmap);
	    if (retmap["exit"]:1 != 0)
	    {
			if(hostname_bak == "")
			{
				retmap["stdout"] = Hostname::CurrentFQ();
			}
			else
			{
				retmap["stdout"] = hostname_bak;
			}
	    }
            string default_fqdn = "linux." + Hostname::DEFAULT_DOMAIN;
	    CaMgm::prop_server_commonName = strip(retmap["stdout"]:default_fqdn);
	}
	else
	{
	    CaMgm::prop_server_commonName = CaMgm::autoYaSTSettings["server_commonName"]:"";
	}
    
	CaMgm::prop_selection = `def;
	CaMgm::prop_ca_commonName = CaMgm::autoYaSTSettings["ca_commonName"]:"";
	CaMgm::prop_CAName = CaMgm::autoYaSTSettings["CAName"]:"YaST_Default_CA";
	CaMgm::prop_country = CaMgm::autoYaSTSettings["country"]:"";
	CaMgm::prop_email = CaMgm::autoYaSTSettings["server_email"]:"";
	CaMgm::prop_organisation = CaMgm::autoYaSTSettings["organisation"]:"";
	CaMgm::prop_organisationUnit = CaMgm::autoYaSTSettings["organisationUnit"]:"";
	CaMgm::prop_locality = CaMgm::autoYaSTSettings["locality"]:"";
	CaMgm::prop_state = CaMgm::autoYaSTSettings["state"]:"";
	CaMgm::prop_password = CaMgm::autoYaSTSettings["password"]:"";
    }

    Progress::NextStage();
    
    // write settings

    if (success)
    {
	if (CaMgm::autoYaSTSettings["importCertificate"]:false)
	{
	    boolean importret =
		(boolean) YaPI::CaManagement::ImportCommonServerCertificate
		($["passwd":CaMgm::autoYaSTSettings["password"]:"",
		   "inFile" : tmpfile]);
		y2milestone ("ImportCommonServerCertificate() return %1",
			     importret);
		if (importret == nil
		    || !importret)
		{
		    success = false;
		}	
	}
	else
	{
	    success = create_default_CA_certificate();	
	}
    }
    if (!success)
    {
	/* Error message */
	Report::Error (_("Cannot create certificates."));
    }    

    sleep(sl);

    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    return success;
}

/**
 * Read ca-management defaults
 * @return true on success
 */
boolean Read() {

	map servercert = nil;
	servercert = (map) YaPI::CaManagement::ReadFile( $["inFile":"/etc/ssl/servercerts/servercert.pem",
                                                       "type":"parsed",
                                                       "datatype":"CERTIFICATE",
                                                       "inForm":"PEM"]);

	boolean found = servercert != nil?true:false;

	string hostname = "linux";
	string domain = Hostname::DEFAULT_DOMAIN;
        map retmap = (map) SCR::Execute (.target.bash_output, "/bin/hostname -s", $[] );

	if (retmap["exit"]:1 == 0)
	{
		hostname = strip(retmap["stdout"]:"linux");
	}

	retmap = (map) SCR::Execute (.target.bash_output,
                                 "/bin/hostname --domain",
                                 $[] );

	if (retmap["exit"]:1 == 0)
	{
		domain = strip(retmap["stdout"]:Hostname::DEFAULT_DOMAIN);
	}
		
	if(found)
	{
		map serverCertDN = servercert["DN_HASH"]:$[];
		map serverCertIssuer = servercert["ISSUER_HASH"]:$[];

		
		CaMgm::autoYaSTSettings["takeLocalServerName"] = false;	
		CaMgm::autoYaSTSettings["password"] = "ENTER PASSWORD HERE";
		CaMgm::autoYaSTSettings["server_commonName"] = ((list)serverCertDN["CN"]:[])[0]:(hostname + "." + domain);
		CaMgm::autoYaSTSettings["CAName"] = "YaST_Default_CA";
		CaMgm::autoYaSTSettings["ca_commonName"] = ((list)serverCertIssuer["CN"]:[])[0]:("YaST Default CA " + "(" + domain + ")");
		CaMgm::autoYaSTSettings["server_email"] = ((list)serverCertDN["emailAddress"]:[])[0]:("postmaster@" + domain);
		CaMgm::autoYaSTSettings["country"] = ((list)serverCertDN["C"]:[])[0]:"US";
		CaMgm::autoYaSTSettings["organisation"] = ((list)serverCertDN["O"]:[])[0]:"";
		CaMgm::autoYaSTSettings["organisationUnit"] = ((list)serverCertDN["OU"]:[])[0]:"";
		CaMgm::autoYaSTSettings["locality"] = ((list)serverCertDN["L"]:[])[0]:"";
		CaMgm::autoYaSTSettings["state"] = ((list)serverCertDN["ST"]:[])[0]:"";
	}
	else
	{
		CaMgm::autoYaSTSettings["takeLocalServerName"] = true;	
		CaMgm::autoYaSTSettings["password"] = "ENTER PASSWORD HERE";
		CaMgm::autoYaSTSettings["CAName"] = "YaST_Default_CA";
		CaMgm::autoYaSTSettings["ca_commonName"] = "YaST Default CA " + "(" + domain + ")";
		CaMgm::autoYaSTSettings["server_email"] = "postmaster@" + domain;
		CaMgm::autoYaSTSettings["country"] = Timezone::GetCountryForTimezone("");
		CaMgm::autoYaSTSettings["organisation"] = "";
		CaMgm::autoYaSTSettings["organisationUnit"] = "";
		CaMgm::autoYaSTSettings["locality"] = "";
		CaMgm::autoYaSTSettings["state"] = "";
	}
	return true;
}

//---------------------------------------------------------------------------
// MAIN
//---------------------------------------------------------------------------

y2milestone("----------------------------------------");
y2milestone("ca-management auto started");

import "CaMgm";
include "ca-management/wizards.ycp";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map) WFM::Args(1);
}
y2milestone("func=%1", func);
map logparam = param;
logparam["password"]="<non-empty>";
y2milestone("param=%1", logparam);

/* Create a summary*/
if(func == "Summary") {
    ret = Summary();
}
/* Reset configuration */
else if (func == "Reset") {
    Import($[]);
    ret = $[];
}
/* Change configuration (run AutoSequence) */
else if (func == "Change") {
    ret = caAutoSequence();
}
/* Import configuration */
else if (func == "Import") {
    ret = Import(param);
}
/* Return actual state */
else if (func == "Export") {
    ret = Export();
}
/* Return needed packages */
else if (func == "Packages") {
    ret = AutoPackages();
}
/* Write given settings */
else if (func == "Write") {
    import "Progress";
    Progress::off();
    ret = Write();
    Progress::on();
}
/* Read  settings */
else if (func == "Read") {
    import "Progress";
    Progress::off();
    ret = Read();
    Progress::on();
}
else if (func == "GetModified") {
    ret =  CaMgm::autoYaSTModified;
}
else if (func == "SetModified") {
    CaMgm::autoYaSTModified = true;
}
/* Unknown function */
else {
    y2error("Unknown function: %1", func);
    ret = false;
}

y2milestone("ret=%1", ret);
y2milestone("ca-management auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
